# This file is used to set up a WordPress instance that uses Bitnami images
#
# It expects WP_HOME and WORDPRESS_DATABASE_PASSWORD env variables to be set
version: "3.4"

services:

  # https://hub.docker.com/r/bitnami/wordpress-nginx/
  # https://github.com/bitnami/containers/tree/main/bitnami/wordpress-nginx#readme
  # wp-content files are owned by 1001:root
  wordpress:
    image: bitnami/wordpress-nginx:6.0.2
    hostname: wordpress
    restart: on-failure
    ports:
      - ${WORDPRESS_HTTP_PORT:-8888}:8080
    volumes:
      - "wordpress_data:/bitnami/wordpress"
      - "opt_bitnami_data:/opt/bitnami/wordpress"
    environment:
      WORDPRESS_BLOG_NAME: 'My test Bitnami WordPress'
      WORDPRESS_DATABASE_NAME: wp_db
      WORDPRESS_DATABASE_USER: wp_user
      WORDPRESS_DATABASE_PASSWORD: ${WORDPRESS_DATABASE_PASSWORD:-p4ssw0rd}
      WORDPRESS_DEBUG: 'true'  # https://wordpress.org/support/article/debugging-in-wordpress/

      # make sure Jetpack uses our custom HTTP PORT
      WORDPRESS_EXTRA_WP_CONFIG_CONTENT: "define( 'JETPACK_SIGNATURE__HTTP_PORT', 8080 );"

    healthcheck:
      test: 'curl http://0.0.0.0:8080/wp-json/ -sI -H "User-Agent: curl/healthcheck"'
      interval: 1m
      timeout: 1s
      retries: 5

  # https://github.com/bitnami/bitnami-docker-mariadb
  db-dev:
    image: docker.io/bitnami/mariadb:10.6
    hostname: mariadb
    restart: on-failure
    environment:
      MARIADB_DATABASE: wp_db
      MARIADB_USER: wp_user
      MARIADB_PASSWORD: ${WORDPRESS_DATABASE_PASSWORD:-p4ssw0rd}
      MARIADB_ROOT_PASSWORD: r00t
      MARIADB_SKIP_TEST_DB: 'yes'
    volumes:
      - mariadb:/bitnami/mariadb
    healthcheck:
      # use $$ to escape env variables
      test: 'mysql --user=$$MARIADB_USER --password=$$MARIADB_PASSWORD $$MARIADB_DATABASE -e "SHOW TABLES"'
      interval: 30s
      timeout: 5s
      retries: 10

  # https://docs.linuxserver.io/images/docker-openssh-server
  # https://github.com/linuxserver/docker-openssh-server/pkgs/container/openssh-server
  ssh-dev:
    image: ghcr.io/linuxserver/openssh-server:8.8_p1-r1-ls91
    hostname: openssh-server
    restart: on-failure
    ports:
      - '62222:2222'
    environment:
      PASSWORD_ACCESS: 'true'
      USER_NAME: wordpress
      USER_PASSWORD: ${SSH_PASSWORD:-p4ssw0rd}
      PUBLIC_KEY_FILE: /config/.ssh/key.pub  # see "volumes" below
      # ensure permissions to the file match those from the wordpress image
      # https://docs.linuxserver.io/images/docker-openssh-server#user-group-identifiers
      PUID: "1001"
      GUID: "0"

      # expose these variables so that the shell will see them (see open-ssh-setup-env-vars.sh script below)
      # wp-load.php is required in the SSH container and it needs to connect to the database
      WORDPRESS_DATABASE_NAME: wp_db
      WORDPRESS_DATABASE_USER: wp_user
      WORDPRESS_DATABASE_PASSWORD: ${WORDPRESS_DATABASE_PASSWORD:-p4ssw0rd}

      # set up the wp-config.php
      WORDPRESS_SITE_URL: ${WORDPRESS_SITE_URL:-http://localhost:8888}

    volumes:
      # see the README.md file on how to regenerate the keys pair
      - "./ssh_key.pub:/config/.ssh/key.pub:ro"

      # allow modifying WordPress files via SSH
      - "wordpress_data:/bitnami/wordpress"
      - "opt_bitnami_data:/opt/bitnami/wordpress"

      # Install php-cli inside the ssh container
      # https://www.linuxserver.io/blog/2019-09-14-customizing-our-containers
      - ./open-ssh-setup.sh:/custom-cont-init.d/open-ssh-setup.sh:ro

volumes:

  mariadb:
  opt_bitnami_data:
  wordpress_data:
